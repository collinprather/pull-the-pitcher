# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/01_data_processing.ipynb (unless otherwise specified).

__all__ = ['AL_teams', 'add_postouts', 'outs_per_inning', 'batters_faced', 'get_games_pitchers_years',
           'preliminary_clean', 'last', 'aggregate_at_bats', 'create_indicator', 'accumulate', 'feature_engineering']

# Internal Cell
import pandas as pd
import sqlite3
import numpy as np
from typing import List

# Cell

AL_teams = [
    "MIN",
    "CLE",
    "DET",
    "HOU",
    "BOS",
    "TOR",
    "LAA",
    "BAL",
    "KC",
    "NYY",
    "CWS",
    "TEX",
    "TB",
    "OAK",
    "SEA",
]

# Cell

# utility functions for identifying openers


def add_postouts(game_pitcher_df: pd.DataFrame):
    """
    Appends a `"postouts"` column to DataFrame.

    * input:
        - `game_pitcher_df`: `pd.DataFrame`, df of pitches thrown by single pitcher in single game, sorted by `at_bat_number`

    * output:
        - `game_pitcher_df`: `pd.DataFrame`, same as input, with the added `"postouts"` column.
    """
    # put assert here to ensure that the df is sorted and is all of the same pitcher
    game_pitcher_df["postouts"] = game_pitcher_df["outs_when_up"].shift(-1).fillna(method="ffill")

    # if the inning changed, then the postouts is 3
    game_pitcher_df.loc[(game_pitcher_df["inning"] != game_pitcher_df["inning"].shift(-1)), "postouts"] = 3
    return game_pitcher_df


def outs_per_inning(x: pd.Series):
    """
    An aggregation function that takes the sum of a one-time step difference in a `pd.Series`.
    Intended to be used in a groupby aggregation to calculate the number of outs recorded in an inning.

    * **usage**:

    ```python
    df.groupby(["inning"]).agg({"postouts": outs_per_inning})
    ```

    * input:
        - `x`: `pd.Series`

    * output:
        - sum of one time-step differences in `x`
    """
    return (x - x.shift(1).fillna(0)).sum()


def batters_faced(at_bats: pd.Series):
    """
    For a series of at bat numbers (presumably, many repeated), this function
    returns the number of unique at bats.

    * input:
        - `at_bats`: `pd.Series`, pitches in an individual

    * output:
        - `int`, number of at bats
    """
    return len(at_bats.unique())

# Cell

def get_games_pitchers_years(df: pd.DataFrame, verbose: bool=True):
    """
    Filter out openers to get all game-pitcher combinations that qualify
    """
    # get unique game ids from regular season games
    games = np.sort(df.loc[(df["game_type"]=="R"), "game_pk"].unique())
    if verbose:
        print(f"In this dataset, there are {len(games)} total games.")

    # This will be list of tuples for each game and pitcher to analyze
    games_pitchers_years = []

    # identifying "opener" candidates
    for game in games:
        # getting df of game data and saving year
        game_df = df.loc[(df["game_pk"]==game)]
        year = int(game_df["game_year"].iloc[0])

        # first pitcher for each team is throwing at min(at_bat_number)
        home_pitcher_first_ab = game_df.loc[(game_df["inning_topbot"]=="Bot"), "at_bat_number"].min()
        home_team = game_df["home_team"].head(1).item()
        home_pitcher = game_df.loc[(game_df["at_bat_number"]==home_pitcher_first_ab), "pitcher"].head(1).item()

        away_pitcher_first_ab = game_df.loc[(game_df["inning_topbot"]=="Top", "at_bat_number")].min()
        away_team = game_df["away_team"].head(1).item()
        away_pitcher = game_df.loc[(game_df["at_bat_number"]==away_pitcher_first_ab), "pitcher"].head(1).item()

        # check if either are "openers"
        for pitcher, team in ((home_pitcher, home_team), (away_pitcher, away_team)):

            # getting sorted df for specific game and specific pitcher
            game_pitcher_df = game_df.loc[(game_df["pitcher"]==pitcher)].sort_values("at_bat_number", ascending=True)

            # adding postouts
            game_pitcher_df = add_postouts(game_pitcher_df)

            # getting criteria to check if opener
            outs = game_pitcher_df.groupby(["inning"]).agg({"postouts": outs_per_inning}).sum().item()
            n_batters = batters_faced(game_pitcher_df["at_bat_number"])
            opener = outs < 7 or n_batters < 10

            # must not be opener, be from an AL team, and be playing in an AL stadium
            if not opener and (team in AL_teams) and (home_team in AL_teams):
                games_pitchers_years.append((game, pitcher, year))

    if verbose:
        print(f"There are {(len(games)*2) - len(games_pitchers_years)} ineligible starts in the dataset (either 'openers' or an NL team).")
        print(f"There are {len(games_pitchers_years)} total eligible game-pitcher combinations in this dataset.")

    return games_pitchers_years

# Cell

def preliminary_clean(df: pd.DataFrame, g: int, p: int):
    """
    Before aggregating, perform a preliminary cleaning of dataset

    * inputs:
        - `df`: `pd.DataFrame`, DataFrame of pitch-level data from eligible game-pitcher combos
        - `g`: `int`, unique game id
        - `p`: `int`, unique pitcher id

    * output:
        - `df`: `pd.DataFrame`, cleaned DataFrame
    """
    df = df.loc[(df["game_pk"]==g) & (df["pitcher"]==p)].sort_values("at_bat_number", ascending=True)

    # adding postouts as a column
    df = add_postouts(df)

    # filling missing events with empty string so can aggregate easily
    df["events"] = df["events"].fillna("")

    # post_bat_score is not actually score after at-bat, needs to be lagged
    df["post_bat_score"] = df["post_bat_score"].shift(-1).fillna(method="ffill")

    # post runners on (need to lag -> this info is known in between at-bats)
    for base in (1, 2, 3):
        df[f"post_on_{base}b"] = df[f"on_{base}b"].fillna(0).apply(lambda x: 1 if x>0 else 0).shift(-1).fillna(method="ffill")

    # if next batter opposite handed
    df["post_opposite_hand"] = (df["stand"]!=df["p_throws"]).astype(int).shift(-1).fillna(method="ffill")

    return df

# Cell


def last(x: pd.Series):
    """
    Utility for grabbing last value in a pd.Series.
    Especially helpful when used in tandem with in pd.DataFrame.groupby.agg

    * input:
        - `x`: `pd.Series`

    * output:
        - last value in `x`
    """
    return x.iloc[-1]


def aggregate_at_bats(df: pd.DataFrame, at_bat_aggs: dict):
    """
    Aggregates statcast data from the pitch to at-bat level.
    Assumes the df has come straight out of preliminary clean.

    * input:
        - `df`: `pd.DataFrame`, Statcast pitch-level data (just went through preliminary clean)

    * output:
        - `agged_df`: `pd.DataFrame`, at-bat level aggregated DataFrame
    """
    agged_df = (
        df.groupby(by=["game_pk", "pitcher", "batter", "at_bat_number"])
        .agg(at_bat_aggs)
        .sort_values(by="at_bat_number")
        .reset_index()
    )
    return agged_df


# Cell

# helper feature engineering funcs


def create_indicator(
    df, col: str = "events", indicators: List = [], indicator_col_names: List = []
):
    """
    In the [statcast data](https://baseballsavant.mlb.com/statcast_search) the
    ["events"](https://baseballsavant.mlb.com/csv-docs#events) column
    is a textual recording of the event that occurred in the at bat.

    * inputs:
        - `df`:, `pd.DataFrame`, at-bat level statcast data
        - `col`: `str`, the column populated with indicators
        - `indicators`: `list`, the categorical variables to turn to indicators
        - `indicator_col_names`: `list`, alternative (optional) names for the new indicators

    * outputs:
        - `df`, `pd.DataFrame`, mutated DataFrame containing the new indicators
    """
    if not indicator_col_names:
        indicator_col_names = indicators
    for indicator, indicator_col_name in zip(indicators, indicator_col_names):
        df[indicator_col_name] = 0
        df.loc[(df[col] == indicator), indicator_col_name] = 1
    return df


def accumulate(df: pd.DataFrame, col: str, agg_func:str="cumsum"):
    """
    Utility to perform a cumulative accumulation of a single column

    * input:
        - `df`: `pd.DataFrame`, DataFrame of at-bat leve statcast data
        - `col`: `str`, column to accumulate
        - `agg_func`: `str`, string recognized by Pandas as a function

    * output:
        - `df`: `pd.DataFrame`, mutated DataFrame with additional accumulated columns
    """
    if not agg_func.startswith("cum"):
        raise Warning(
            "Are you sure you want to accumulate with a non-cumulative aggregation function?"
        )

    df[f"{col}_{agg_func}"] = df[col].agg([agg_func])
    return df


# Cell


def feature_engineering(df: pd.DataFrame):
    """
    Performs feature engineering on at-bat level statcast data.
    df should come directly out of `aggregate_at_bats`.

    * input:
        - `df`: `pd.DataFrame`, at-bat level statcast data

    * output:
        - `df`: `pd.DataFrame`, mutated to have many new features.
    """
    # strike-ball ratio
    df["cum_balls"] = df["balls"].cumsum()
    df["cum_strikes"] = df["strikes"].cumsum()
    df["cum_sb_ratio"] = df["cum_strikes"] / (df["cum_balls"] + 1)

    # end of inning
    df["end_inning"] = df["postouts"].apply(lambda x: 1 if (x == 3) else 0)

    # times through order
    df["times_thru_order"] = [1 / 9 * i for i in range(1, len(df) + 1)]

    # score diff
    df["score_diff"] = df["post_fld_score"] - df["post_bat_score"]

    # post total runners
    df["post_total_runners"] = df[["post_on_1b", "post_on_2b", "post_on_3b"]].sum(
        axis=1
    )

    # tying run or leading run on base
    df["tying_run_on"] = (
        (df["score_diff"].isin((0, 1))) & (df["post_total_runners"] >= 1)
    ).astype(int)

    # pitch total
    df["pitch_total"] = df["pitch_number"].cumsum()

    # getting pitcher's team
    if df["inning_topbot"].iloc[0] == "Bot":
        df["pitcher_team"] = df["away_team"]
    else:
        df["pitcher_team"] = df["home_team"]

    # adding unique category for each team-year combo (for embeddings later)
    df["pitcher_team_year"] = (
        df["pitcher_team"] + "_" + df["game_year"].astype(int).astype(str)
    )

    # creating indicator cols for different events
    df = create_indicator(
        df,
        col="events",
        indicators=["strikeout", "walk", "single", "double", "triple", "home_run"],
    )

    # cumulative stats
    cum_cols = [
        ("strikeout", "cumsum"),
        ("walk", "cumsum"),
        ("single", "cumsum"),
        ("double", "cumsum"),
        ("triple", "cumsum"),
        ("home_run", "cumsum"),
    ]
    for col, agg_func in cum_cols:
        df = accumulate(df, col=col, agg_func=agg_func)

    # cumulative bases
    df["bases_cumsum"] = (
        df["walk_cumsum"]
        + df["single_cumsum"]
        + (2 * df["double_cumsum"])
        + (3 * df["triple_cumsum"])
        + (4 * df["home_run_cumsum"])
    )

    return df
